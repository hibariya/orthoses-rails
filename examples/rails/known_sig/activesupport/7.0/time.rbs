class Time
  include DateAndTime::Zones
  include DateAndTime::Calculations
  include DateAndTime::Compatibility

  # Returns <tt>Time.zone.now</tt> when <tt>Time.zone</tt> or <tt>config.time_zone</tt> are set, otherwise just returns <tt>Time.now</tt>.
  def self.current: () -> ActiveSupport::TimeWithZone # strictly `(ActiveSupport::TimeWithZone | Time)` but it's inconvenient
  def self.zone: () -> ActiveSupport::TimeZone # strictly `ActiveSupport::TimeWithZone?` but it's inconvenient

  def ago: (untyped other) -> self
  def advance: (untyped options) -> self
  def change: (untyped options) -> self
  def in_time_zone: (?(ActiveSupport::TimeZone | String) new_zone) -> ::ActiveSupport::TimeWithZone
                  | (false? zone) -> ::Time
  def beginning_of_day: () -> self
  def beginning_of_hour: () -> self
  def beginning_of_minute: () -> self
  def compare_with_coercion: (untyped other) -> (-1 | 0 | 1 | nil)
  def end_of_day: () -> self
  def end_of_hour: () -> self
  def end_of_minute: () -> self
  def eql_with_coercion: (untyped other) -> bool
  def middle_of_day: () -> self

  def +: (ActiveSupport::Duration other) -> self
       | ...
  alias plus_with_duration +

  def minus_with_duration: (ActiveSupport::Duration other) -> self
                         | (self arg0) -> Float
                         | (Numeric arg0) -> self
  def -: (DateTime other) -> Float
       | (ActiveSupport::Duration other) -> self
       | ...
  alias minus_with_coercion -

  def next_day: (?::Integer days) -> self
  def next_month: (?::Integer months) -> self
  def next_year: (?::Integer years) -> self
  def prev_day: (?::Integer days) -> self
  def prev_month: (?::Integer months) -> self
  def prev_year: (?::Integer years) -> self
  def seconds_since_midnight: () -> Float
  def seconds_until_end_of_day: () -> Integer
  def sec_fraction: () -> (Integer | Rational)
end
