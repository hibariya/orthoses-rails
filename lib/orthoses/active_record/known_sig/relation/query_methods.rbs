module ActiveRecord
  module QueryMethods
    def includes_values: () -> ::Array[untyped]
    def eager_load_values: () -> ::Array[untyped]
    def preload_values: () -> ::Array[untyped]
    def select_values: () -> ::Array[untyped]
    def group_values: () -> ::Array[untyped]
    def order_values: () -> ::Array[untyped]
    def joins_values: () -> ::Array[untyped]
    def left_outer_joins_values: () -> ::Array[untyped]
    def references_values: () -> ::Array[untyped]
    def extending_values: () -> ::Array[untyped]
    def unscope_values: () -> ::Array[untyped]
    def optimizer_hints_values: () -> ::Array[untyped]
    def annotate_values: () -> ::Array[untyped]
    def limit_value: () -> untyped # default is `nil`
    def offset_value: () -> untyped # default is `nil`
    def lock_value: () -> untyped # default is `nil`
    def readonly_value: () -> untyped # default is `nil`
    def reordering_value: () -> untyped # default is `nil`
    def strict_loading_value: () -> untyped # default is `nil`
    def reverse_order_value: () -> untyped # default is `nil`
    def distinct_value: () -> untyped # default is `nil`
    def create_with_value: () -> ::Hash[untyped, untyped]
    def skip_query_cache_value: () -> untyped # default is `nil`
    def where_clause: () -> untyped # default is `Relation::WhereClause.empty`
    def having_clause: () -> untyped # default is `Relation::WhereClause.empty`
    def from_clause: () -> untyped # default is `Relation::FromClause.empty`
  end
end
